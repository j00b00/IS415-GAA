---
title: "Hands-on Ex04 2nd Order Spatial Point Patterns Analysis Methods"
format:
  html:
    code-fold: true
    code-summary: "Show the code"

execute: 
  eval: true
  echo: true
  warning: false
date: "`r Sys.Date()`"
---

## Installing and loading the R packages
```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

## Spatial Data Wrangling
```{r}
childcare_sf <- st_read("data/ChildCareServices.geojson") %>%
  st_transform(crs = 3414)

sg_sf <- st_read(dsn = "data", layer="CostalOutline")

mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```
# DIY retrieve the referencing system information

```{r}
st_crs(childcare_sf)
st_crs(sg_sf)
st_crs(mpsz_sf)
```

# DIY assign correct crs to mpsz_sf and sg_sf

```{r}
sg_sf <- st_set_crs(sg_sf, 3414)
mpsz_sf <- st_set_crs(mpsz_sf, 3414)

st_crs(childcare_sf)
st_crs(sg_sf)
st_crs(mpsz_sf)
```

# Mapping geospatial data sets

#DIY

```{r}
tmap_mode("plot")
tm_shape(mpsz_sf)+tm_polygons()+tm_shape(childcare_sf)+tm_dots()

```

# Alternative

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
tmap_mode("plot")
```

## Geospatial Data Wrangling

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

# DIY display the information of spatial classes

```{r}
subset(childcare)
subset(mpsz)
subset(sg)
```

# Converting Spatial* class into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")

childcare_sp
sg_sp
```

#Converting generic sp format into spatstat's ppp format

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp

plot(childcare_ppp)

summary(childcare_ppp)
```

# Handling duplicate points

```{r}
any(duplicated(childcare_ppp))

multiplicity(childcare_ppp)

sum(multiplicity(childcare_ppp) > 1)

tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)

tmap_mode('plot')
```

# Overcome Challenge (How to spot the duplicate point form the map above)

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

any(duplicated(childcare_ppp_jit))
```

# Creating owin object

```{r}
sg_owin <- as(sg_sp, "owin")

plot(sg_owin)

summary(sg_owin)
```

# Combining point events objects and owin object

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]

summary(childcareSG_ppp)
```

# DIY plot childcareSG_ppp

```{r}
plot(childcareSG_ppp)
```

# Extracting study area
```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```
# Plotting target planning areas
```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```
# Convering the spatial point data frame into generic sp format
```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

# Create owin objects
```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

# Combining childcare points and the study area
```{r} 
childcare_pg_ppp = childcare_ppp_jit[pg_owin] 
childcare_tm_ppp = childcare_ppp_jit[tm_owin] 
childcare_ck_ppp = childcare_ppp_jit[ck_owin] 
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```
# Rescale function -\> transform the unit of measurement from metre to kilometre.
```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

# Plot these 4 study areas and the locations of the childcare centres
```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

## Second-order Spatial Point Patterns Analysis
## Analysing Spatial Point Process Using G-Function
# Cho Chu Kang planning area (Computing G-function estimation)
```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```
# Performing Complete Spatial Randomness Test
```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)

plot(G_CK.csr)
```
#Tampines planning area (Computing G-function estimation)
```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```
# Performing Complete Spatial Randomness Test
```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)

plot(G_tm.csr)
```

## Analysing Spatial Point Process Using F-Function
# Choa Chu Kang planning area (Computing F-function estimation)
```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```
# Performing Complete Spatial Randomness Test
```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)

plot(F_CK.csr)
```
#Tampines planning area (Computing F-function estimation)
```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```
# Performing Complete Spatial Randomness Test
```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)

plot(F_tm.csr)
```
## Analysing Spatial Point Process Using K-Function
# Choa Chu Kang planning area (Computing K-function estimation)
```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```
# Performing Complete Spatial Randomness Test
```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)

plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```
# Tampines planning area (Computing K-function estimation)
```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r,  ylab= "K(d)-r", xlab = "d(m)", xlim=c(0,1000))
```
# Performing Complete Spatial Randomness Test
```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)

plot(K_tm.csr, . - r ~ r, xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

## Analysing Spatial Point Process Using L-Function
# Choa Chu Kang Planning area (Computing L-function estimation)
```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, ylab= "L(d)-r", xlab = "d(m)")
```
# Performing Complete Spatial Randomness Test
```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

# Tampines Planning area (Computing L-function estimation)
```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r,ylab= "L(d)-r", xlab = "d(m)",xlim=c(0,1000))
```
# Performing Complete Spatial Randomness Test
```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_tm.csr, . - r ~ r,xlab="d", ylab="L(d)-r", xlim=c(0,500))
```